import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getAllProducts, selectProduct, } from './ProductDisplayApi';

const initialState = {
  items: [
    1,2,3
  ],
  selectedProduct : {}
};
export const getAllProductsAsync = createAsyncThunk(
  'products/getAllProducts',
  async (id) => {
    const response = await getAllProducts (id);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);
export const selectProductAsync = createAsyncThunk(
  'products/selectProduct',
  async (productDetails) => {
    const response = await selectProduct(productDetails);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


export const productSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllProductsAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(getAllProductsAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.items = []

        state.items = action.payload;
      })
      .addCase(selectProductAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.selectedProduct = {}
        state.selectedProduct = action.payload;
      })
  },
});

export const { increment } = productSlice.actions;


export default productSlice.reducer;