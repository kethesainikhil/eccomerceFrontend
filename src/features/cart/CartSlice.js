import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AddToCart, deleteToCart, updateToCart } from './CartApi';

const initialState = {
  cartItems: [
  ],

};
export const addToCartAsync = createAsyncThunk(
  'cart/addItem',
  async (product) => {
    console.log(product,"product deails")

    const response = await AddToCart(product);
    console.log(response,"response from asyncccc")
    return response
  }
);
export const updateQuantityAsync = createAsyncThunk(
  'cart/updateItem',
  async (productDetails) => {
    const response = await updateToCart(productDetails);
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const deleteToCartAsync = createAsyncThunk(
  'cart/deleteProduct',
  async (id) => {
    const response = await deleteToCart(id);
    return {

    };
  }
);


export const cartSlice = createSlice({
  name: 'Cart',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    incrementQuantity: (state, action) => {
      const { id } = action.payload;
      const updatedCartItems = state.cartItems.map(item =>
        item[0].id === id
          ? { ...item[0], quantity: item[0].quantity + 1 } // Update quantity for the matching item
          : item[0]
      );
      state.cartItems = updatedCartItems;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deleteToCartAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';

        state.cartItems.push(action.payload);
      })
      .addCase(deleteToCartAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.cartItems.map(item => item.id !== action.payload)
      })
      .addCase(updateQuantityAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        console.log(action.payload,"action.payload")
        state.cartItems = state.cartItems.map(item =>
          
          item.id === action.payload[0].id
            ? { ...item, quantity: item.quantity + 3 } // Create a new object with updated quantity
            : item
        );
      })

  },
});

export const { incrementQuantity } = cartSlice.actions;


export default cartSlice.reducer;