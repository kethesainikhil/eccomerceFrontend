import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
 import {getUser} from "./userApi"
const initialState = {
  user: null
};
export const getUserAsync = createAsyncThunk(
  'getallusers',
  async (data) => {
    console.log("async thunk")
    const response = await getUser(data)
    console.log("resonse",response)
    return response;
  }
);


export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    logoutuser:(state)=>{
      localStorage.removeItem("user")
      console.log("used logut optoin ")
      state.user = null
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUserAsync.pending, (state) => {
        state.status = 'loading';

      })
      .addCase(getUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload;
      })
  },
});

export const { increment,logoutuser } = userSlice.actions;


export default userSlice.reducer;